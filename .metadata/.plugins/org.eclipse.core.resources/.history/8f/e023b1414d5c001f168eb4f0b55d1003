package com.utils.neotech;

import java.util.List;
import java.util.Set;

import org.openqa.selenium.Alert;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchFrameException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

public class CommonMethods extends BaseClass {

		/**
		 * This method clears a text box and send the text parameter to it.
		 * 
		 * @param element
		 * @param text
		 */
		public static void sendText(WebElement element, String text) {
			element.clear();
			element.sendKeys(text);
		}
		/**
		 * This method checks if the radio/checkbox is enabled, and then clicks on the
		 * element that have the attribute value as selectValue.
		 * 
		 * @param elementList
		 * @param selectValue
		 */
		public static void clickRadioOrCheckbox(List<WebElement> elementList, String selectValue) {
			for(WebElement el: elementList) {
				String elementValue=el.getAttribute("value").trim();
				if(el.equals(selectValue)&&el.isEnabled()) {
					el.click();
					break;
				}
			}
		
		}
		/**
		 * This method pauses the execution for a certain amount of seconds.
		 * 
		 * 
		 * @param seconds
		 */
		public static void wait(int seconds) {
			try {
				Thread.sleep(seconds*1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		/**
		 * This method selects a drop down element based on visible text.
		 * 
		 * @param element
		 * @param visibleText
		 */
		public static void selectDropdown(WebElement element, String visibleText) {
			try {
			Select sl = new Select(element);
			sl.selectByVisibleText(visibleText);}
			catch (Exception e) {
				e.printStackTrace();
			}
			
		}
		/**
		 * This method selects a drop down element based on index.
		 * 
		 * 
		 * @param element
		 * @param index
		 */
		public static void selectDropdown(WebElement element, int index) {
			try {
				Select sl = new Select(element);
				sl.selectByIndex(index);}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		/**
		 * This method switches the focus of the driver to an Alert and accepts it if
		 * found. If not found, the NoAlertPresentException is handled.
		 * 
		 */
		public static void acceptAlert() {
			try {
				Alert alert=driver.switchTo().alert();
				alert.accept();
			}
			catch(NoAlertPresentException e) {
				e.printStackTrace();
				
			}
		}
		/**
		 * This method switches the focus of the driver to an Alert and dismisses it if
		 * found. If not found, the NoAlertPresentException is handled.
		 * 
		 */
		public static void dismissAlert() {
			try {
			Alert alert=driver.switchTo().alert();
			alert.dismiss();
			}
			catch(NoAlertPresentException e) {
				e.printStackTrace();
			}
			
		}
		/**
		 * This method will switch the focus of the driver to an alert and return its
		 * text. If alert is not found, the NoAlertPresentException is handled.
		 * 
		 * @return
		 */
		public static String getAlertText() {
			String getAlertText=null;
			try {
				Alert alert=driver.switchTo().alert();
				alert.getText();
			}
			catch(NoAlertPresentException e) {
				e.printStackTrace();
			}
			return getAlertText;
		}
		/**
		 * This method will switch the focus of the driver to an alert and send text to
		 * it. If alert is not found, the NoAlertPresentException is handled.
		 * 
		 * @param text
		 */
		public static void sendAlertText(String text) {
			try {
				Alert alert=driver.switchTo().alert();
				alert.sendKeys(text);
			}
			catch(NoAlertPresentException e) {
				e.printStackTrace();
			}
		}
		/**
		 * 
		 * This method switches to a frame using its name or id.
		 * 
		 * @param nameOrId
		 */
		public static void switchToframe(String nameOrId) {
			try{
				driver.switchTo().frame(nameOrId);}
			catch(NoSuchFrameException e) {
				e.printStackTrace();
				
			}
			
		}
		/**
		 * 
		 * This method switches to a frame using its index.
		 * 
		 * @param nameOrId
		 */
		public static void switchToFrame(int index) {
			try {
			driver.switchTo().frame(index);}
			catch(NoSuchFrameException e) {
				e.printStackTrace();
			}

		}
		/**
		 * This method switches to a frame using a WebElement.
		 * 
		 * @param element
		 */
		public static void switchToFrame(WebElement element) {
			try {
			driver.switchTo().frame(element);}
			catch(NoSuchFrameException e) {
				e.printStackTrace();
			}
		}
		/**
		 * This method switches the focus of the driver to the child window.
		 * 
		 */
		public static void switchToChildWindow() {
			String mainWindow=driver.getWindowHandle();
			Set<String>handles=driver.getWindowHandles();
			for(String handle:handles) {
				if(!mainWindow.equals(handle)) {
					driver.switchTo().window(handle);
				}
			}
			
			
		}
		
		
		
		
}
		
		

	


